const axios = require('axios');
const DataAnalyzer = require('./backend/dataAnalyzer');

const baseURL = 'http://localhost:4000';

async function testAnalyzerDirect() {
  console.log('üß™ Test direct de l\'analyseur\n');

  try {
    // R√©cup√©rer les donn√©es brutes
    const response = await axios.get(`${baseURL}/api/audit/raw`);
    
    if (response.data.status === 'success' && response.data.data.length > 0) {
      const data = response.data.data;
      console.log(`üìä Donn√©es r√©cup√©r√©es: ${data.length} documents`);
      
      // Cr√©er l'analyseur
      const analyzer = new DataAnalyzer();
      
      // Charger les donn√©es
      const loadSuccess = analyzer.loadData(data);
      console.log(`‚úÖ Chargement des donn√©es: ${loadSuccess ? 'Succ√®s' : '√âchec'}`);
      
      if (loadSuccess) {
        // Analyser les utilisateurs
        console.log('\nüë• Analyse des utilisateurs:');
        const users = analyzer.analyzeUsers();
        console.log(`Utilisateurs OS: ${users.os_users.length} - ${users.os_users.join(', ')}`);
        console.log(`Utilisateurs DB: ${users.db_users.length} - ${users.db_users.join(', ')}`);
        
        // Analyser les actions
        console.log('\n‚ö° Analyse des actions:');
        const actions = analyzer.analyzeActions();
        console.log(`Types d'actions: ${actions.types.length} - ${actions.types.join(', ')}`);
        
        // Analyser les objets
        console.log('\nüì¶ Analyse des objets:');
        const objects = analyzer.analyzeObjects();
        console.log(`Noms d'objets: ${objects.names.length} - ${objects.names.slice(0, 10).join(', ')}`);
        console.log(`Sch√©mas: ${objects.schemas.length} - ${objects.schemas.join(', ')}`);
        
        // Analyse compl√®te
        console.log('\nüìà Analyse compl√®te:');
        const analysis = analyzer.analyzeAll();
        console.log('R√©sultats:', JSON.stringify(analysis, null, 2));
        
        // Patterns suspects
        console.log('\nüö® Patterns suspects:');
        const patterns = analyzer.findSuspiciousPatterns();
        console.log('Patterns:', JSON.stringify(patterns, null, 2));
        
      } else {
        console.log('‚ùå √âchec du chargement des donn√©es');
      }
      
    } else {
      console.log('‚ùå Aucune donn√©e r√©cup√©r√©e');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

testAnalyzerDirect().catch(console.error); 