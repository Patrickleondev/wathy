SQL_ID,EXECUTIONS,ELAPSED_SEC,CPU_SEC,SQL_TEXT
b3853arjnybzv,25,0.24,0.07,"INSERT INTO AUDSYS.AUD$UNIFIED (AUDIT_TYPE, SESSIONID, PROXY_SESSIONID, OS_USER, HOST_NAME, TERMINAL, INSTANCE_ID, DBID, AUTHENTICATION_TYPE, USERID, PROXY_USERID, EXTERNAL_USERID, GLOBAL_USERID, CLIENT_PROGRAM_NAME, DBLINK_INFO, XS_USER_NAME, XS_SESSIONID, ENTRY_ID, STATEMENT_ID, EVENT_TIMESTAMP, ACTION, RETURN_CODE, OS_PROCESS, TRANSACTION_ID, SCN, EXECUTION_ID, OBJ_OWNER, OBJ_NAME, CLIENT_IDENTIFIER, NEW_OWNER, NEW_NAME, OBJECT_EDITION, SYSTEM_PRIVILEGE_USED, SYSTEM_PRIVILEGE, AUDIT_OPTION, OBJECT_PRIVILEGES, ROLE, TARGET_USER, EXCLUDED_USER, EXCLUDED_SCHEMA, EXCLUDED_OBJECT, CURRENT_USER, ADDITIONAL_INFO, UNIFIED_AUDIT_POLICIES) values (:AUDIT_TYPE, :SESSIONID, :PROXY_SESSIONID, :OS_USER, :HOST_NAME, :TERMINAL, :INSTANCE_ID, :DBID, :AUTHENTICATION_TYPE, :USERID, :PROXY_USERID, :EXTERNAL_USERID, :GLOBAL_USERID, :CLIENT_PROGRAM_NAME, :DBLINK_INFO, :XS_USER_NAME, :XS_SESSIONID, :ENTRY_ID, :STATEMENT_ID, :EVENT_TIMESTAMP, :ACTION, :RETURN_CODE, :OS_PROCESS, :TRANSACTION_ID, :SCN, :EXECUTION_ID, :OBJ_OWNER, :OBJ_NAME, :CLIENT_IDENTIFIER, :NEW_OWNER, :NEW_NAME, :OBJECT_EDITION, :SYSTEM_PRIVILEGE_USED, :SYSTEM_PRIVILEGE, :AUDIT_OPTION, :OBJECT_PRIVILEGES, :ROLE, :TARGET_USER, :EXCLUDED_USER, :EXCLUDED_SCHEMA, :EXCLUDED_OBJECT, :CURRENT_USER, :ADDITIONAL_INFO, :UNIFIED_AUDIT_POLICIES)"
1jb0rx0tq963n,1,0.19,0.11,delete /* QOSH:PURGE_OLD_STS *//*+ dynamic_sampling(4) */ from sys.optstat_snapshot$                 where timestamp < :1   and rownum <=  :2   
c3zymn7x3k6wy,3,0.15,0.01,"select obj#, dataobj#, part#, hiboundlen, hiboundval, flags, ts#, file#, block#, pctfree$, initrans, maxtrans, analyzetime, samplesize, rowcnt, blevel, leafcnt, distkey, lblkkey, dblkkey, clufac, pctthres$, length(bhiboundval), bhiboundval from indpart$ where bo# = :1 order by part#"
f705bwx3q0ydq,1,0.12,0.12,"select count(*) from dba_autotask_window_clients c, (select window_name, max(log_date) max_log_date from dba_scheduler_window_log where operation = 'OPEN' group by window_name) wo, (select window_name, max(log_date) max_log_date from dba_scheduler_window_log where operation = 'CLOSE' group by window_name) wc where c.window_name = wo.window_name and c.optimizer_stats = 'ENABLED' and wo.window_name = wc.window_name and wo.max_log_date < wc.max_log_date and wc.window_name not in (select h.window_name from dba_autotask_job_history h where h.client_name = 'auto optimizer stats collection' and h.job_start_time between wo.max_log_date and wc.max_log_date) "
f705bwx3q0ydq,1,0.12,0.12,"select count(*) from dba_autotask_window_clients c, (select window_name, max(log_date) max_log_date from dba_scheduler_window_log where operation = 'OPEN' group by window_name) wo, (select window_name, max(log_date) max_log_date from dba_scheduler_window_log where operation = 'CLOSE' group by window_name) wc where c.window_name = wo.window_name and c.optimizer_stats = 'ENABLED' and wo.window_name = wc.window_name and wo.max_log_date < wc.max_log_date and wc.window_name not in (select h.window_name from dba_autotask_job_history h where h.client_name = 'auto optimizer stats collection' and h.job_start_time between wo.max_log_date and wc.max_log_date) "
1kb56hd6c73bv,1,0.09,0.09,"select count(*) num_windows, sum(case when jobs_started<>jobs_completed then 1 else 0 end) num_jobs_incomplete from  (select x.cname_ketcl client_name,       sum(case when operation = 'RUN'           then 1 else 0 end) as jobs_started,       sum(case when operation = 'RUN' and status = 'SUCCEEDED'           then 1 else 0 end) as jobs_completed  from x$ketcl x,       dba_scheduler_job_log jl,       (select window_name, window_start_time, window_end_time        from (          select window_name,            lag(window_name, 1) over (order by log_date ) prev_window_name,            operation,            lag(operation, 1) over (order by log_date ) prev_operation,            lag(log_date, 1) over (order by log_date ) window_start_time,            log_date window_end_time          from dba_scheduler_window_log          where operation in  ('OPEN', 'CLOSE'))        where operation = 'CLOSE' and prev_operation = 'OPEN'          and window_name = prev_window_name) WLOG where (bitand(x.attr_ketcl,2048) = 0     or 999999 < (select to_number(value)                    from v$system_parameter                   where name = '_automatic_maintenance_test'))   and x.cid_ketcl > 0   and jl.job_class in (x.hjc_ketcl,x.ujc_ketcl,x.mjc_ketcl)   and jl.log_date between wlog.window_start_time                       and wlog.window_end_time group by x.cname_ketcl, wlog.window_name, wlog.window_start_time,          wlog.window_end_time - wlog.window_start_time,           wlog.window_end_time ) where client_name = 'auto optimizer stats collection'"
b13g21mgg8y98,1,0.09,0.09,"insert /* KSXM:TAKE_SNPSHOT */ into sys.optstat_snapshot$ (obj#, inserts, updates, deletes, timestamp, flags) (select m.obj#, m.inserts, m.updates, m.deletes, systimestamp,  dbms_stats_advisor.compute_volatile_flag(    m.obj#, m.flags, :flags, m.inserts, m.updates, m.deletes,    s.inserts, s.updates, s.deletes, null,    nvl(to_number(p.valchar), :global_stale_pcnt), s.gather) flags from sys.mon_mods_all$ m, (select si.obj#, max(si.inserts) inserts, max(si.updates) updates,    max(si.deletes) deletes, decode(bitand(max(si.flags), :gather_flag), 0,                               'NO_GATHER', 'GATHER') gather,    max(si.timestamp) timestamp  from sys.optstat_snapshot$ si,  (select obj#, max(timestamp) ts from sys.optstat_snapshot$   group by obj#) sm  where si.obj# = sm.obj# and si.timestamp = sm.ts  group by si.obj#) s, sys.optstat_user_prefs$ p where m.obj# = s.obj#(+)  and m.obj# = p.obj#(+) and pname(+) = 'STALE_PERCENT'  and dbms_stats_advisor.check_mmon_policy_violation(rownum, 6, 2) = 0) "
5pj6mtazkhmdd,4,0.09,0.09,BEGIN /* KSXM:FLUSH DML_MON */    dbms_stats_internal.gather_scan_rate_by_mmon;  END;
1kb56hd6c73bv,1,0.09,0.09,"select count(*) num_windows, sum(case when jobs_started<>jobs_completed then 1 else 0 end) num_jobs_incomplete from  (select x.cname_ketcl client_name,       sum(case when operation = 'RUN'           then 1 else 0 end) as jobs_started,       sum(case when operation = 'RUN' and status = 'SUCCEEDED'           then 1 else 0 end) as jobs_completed  from x$ketcl x,       dba_scheduler_job_log jl,       (select window_name, window_start_time, window_end_time        from (          select window_name,            lag(window_name, 1) over (order by log_date ) prev_window_name,            operation,            lag(operation, 1) over (order by log_date ) prev_operation,            lag(log_date, 1) over (order by log_date ) window_start_time,            log_date window_end_time          from dba_scheduler_window_log          where operation in  ('OPEN', 'CLOSE'))        where operation = 'CLOSE' and prev_operation = 'OPEN'          and window_name = prev_window_name) WLOG where (bitand(x.attr_ketcl,2048) = 0     or 999999 < (select to_number(value)                    from v$system_parameter                   where name = '_automatic_maintenance_test'))   and x.cid_ketcl > 0   and jl.job_class in (x.hjc_ketcl,x.ujc_ketcl,x.mjc_ketcl)   and jl.log_date between wlog.window_start_time                       and wlog.window_end_time group by x.cname_ketcl, wlog.window_name, wlog.window_start_time,          wlog.window_end_time - wlog.window_start_time,           wlog.window_end_time ) where client_name = 'auto optimizer stats collection'"
5pj6mtazkhmdd,4,0.08,0.08,BEGIN /* KSXM:FLUSH DML_MON */    dbms_stats_internal.gather_scan_rate_by_mmon;  END;
b13g21mgg8y98,1,0.08,0.08,"insert /* KSXM:TAKE_SNPSHOT */ into sys.optstat_snapshot$ (obj#, inserts, updates, deletes, timestamp, flags) (select m.obj#, m.inserts, m.updates, m.deletes, systimestamp,  dbms_stats_advisor.compute_volatile_flag(    m.obj#, m.flags, :flags, m.inserts, m.updates, m.deletes,    s.inserts, s.updates, s.deletes, null,    nvl(to_number(p.valchar), :global_stale_pcnt), s.gather) flags from sys.mon_mods_all$ m, (select si.obj#, max(si.inserts) inserts, max(si.updates) updates,    max(si.deletes) deletes, decode(bitand(max(si.flags), :gather_flag), 0,                               'NO_GATHER', 'GATHER') gather,    max(si.timestamp) timestamp  from sys.optstat_snapshot$ si,  (select obj#, max(timestamp) ts from sys.optstat_snapshot$   group by obj#) sm  where si.obj# = sm.obj# and si.timestamp = sm.ts  group by si.obj#) s, sys.optstat_user_prefs$ p where m.obj# = s.obj#(+)  and m.obj# = p.obj#(+) and pname(+) = 'STALE_PERCENT'  and dbms_stats_advisor.check_mmon_policy_violation(rownum, 6, 2) = 0) "
3kqrku32p6sfn,4,0.07,0.07,"MERGE /*+ OPT_PARAM('_parallel_syspls_obey_force' 'false') */ INTO OPTSTAT_USER_PREFS$ D USING ( SELECT * FROM (SELECT O.OBJ#, SYSTIMESTAMP CHGTIME, ROUND(MAX(S.DELTA_READ_IO_BYTES/S.DELTA_TIME), 3) SCANRATE FROM GV$ACTIVE_SESSION_HISTORY S, GV$SQL_PLAN P, OBJ$ O, USER$ U WHERE S.INST_ID = P.INST_ID AND S.SQL_ID = P.SQL_ID AND S.SQL_PLAN_HASH_VALUE = P.PLAN_HASH_VALUE AND S.SQL_PLAN_LINE_ID = P.ID AND P.OBJECT_NAME = O.NAME AND (:B4 IS NULL OR O.OBJ# = :B4 ) AND O.OWNER# = U.USER# AND P.OBJECT_OWNER = U.NAME AND O.TYPE# = 2 AND S.CON_ID = SYS_CONTEXT('userenv', 'con_id') AND P.CON_ID = SYS_CONTEXT('userenv', 'con_id') AND S.SQL_PLAN_OPERATION = 'TABLE ACCESS' AND P.OPERATION = 'TABLE ACCESS' AND S.DELTA_TIME > 0 AND S.DELTA_READ_IO_BYTES > 0 AND FROM_TZ(S.SAMPLE_TIME, :B3 ) > :B2 AND (:B1 = 'ON' OR (:B1 = 'HADOOP_ONLY' AND EXISTS ( SELECT NULL FROM SYS.EXTERNAL_TAB$ ET WHERE ET.OBJ# = O.OBJ# AND TYPE$ IN ('ORACLE_HIVE', 'ORACLE_HDFS', 'ORACLE_BIGDATA')))) GROUP BY O.OBJ#) C WHERE NOT EXISTS (SELECT NULL FROM OPTSTAT_USER_PREFS$ PR WHERE PNAME = 'SCAN_RATE' AND C.OBJ# = PR.OBJ# AND (PR.SPARE1 IS NULL OR C.SCANRATE <= TO_NUMBER(PR.VALCHAR))) ) SRC ON (D.OBJ#=SRC.OBJ# AND D.PNAME = 'SCAN_RATE') WHEN MATCHED THEN UPDATE SET D.VALCHAR= TO_CHAR(SRC.SCANRATE), D.CHGTIME=SRC.CHGTIME, D.SPARE1=1 WHEN NOT MATCHED THEN INSERT (OBJ#, PNAME, VALCHAR, CHGTIME, SPARE1) VALUES(SRC.OBJ#, 'SCAN_RATE', TO_CHAR(SRC.SCANRATE), SRC.CHGTIME, 1)"
3kqrku32p6sfn,4,0.07,0.07,"MERGE /*+ OPT_PARAM('_parallel_syspls_obey_force' 'false') */ INTO OPTSTAT_USER_PREFS$ D USING ( SELECT * FROM (SELECT O.OBJ#, SYSTIMESTAMP CHGTIME, ROUND(MAX(S.DELTA_READ_IO_BYTES/S.DELTA_TIME), 3) SCANRATE FROM GV$ACTIVE_SESSION_HISTORY S, GV$SQL_PLAN P, OBJ$ O, USER$ U WHERE S.INST_ID = P.INST_ID AND S.SQL_ID = P.SQL_ID AND S.SQL_PLAN_HASH_VALUE = P.PLAN_HASH_VALUE AND S.SQL_PLAN_LINE_ID = P.ID AND P.OBJECT_NAME = O.NAME AND (:B4 IS NULL OR O.OBJ# = :B4 ) AND O.OWNER# = U.USER# AND P.OBJECT_OWNER = U.NAME AND O.TYPE# = 2 AND S.CON_ID = SYS_CONTEXT('userenv', 'con_id') AND P.CON_ID = SYS_CONTEXT('userenv', 'con_id') AND S.SQL_PLAN_OPERATION = 'TABLE ACCESS' AND P.OPERATION = 'TABLE ACCESS' AND S.DELTA_TIME > 0 AND S.DELTA_READ_IO_BYTES > 0 AND FROM_TZ(S.SAMPLE_TIME, :B3 ) > :B2 AND (:B1 = 'ON' OR (:B1 = 'HADOOP_ONLY' AND EXISTS ( SELECT NULL FROM SYS.EXTERNAL_TAB$ ET WHERE ET.OBJ# = O.OBJ# AND TYPE$ IN ('ORACLE_HIVE', 'ORACLE_HDFS', 'ORACLE_BIGDATA')))) GROUP BY O.OBJ#) C WHERE NOT EXISTS (SELECT NULL FROM OPTSTAT_USER_PREFS$ PR WHERE PNAME = 'SCAN_RATE' AND C.OBJ# = PR.OBJ# AND (PR.SPARE1 IS NULL OR C.SCANRATE <= TO_NUMBER(PR.VALCHAR))) ) SRC ON (D.OBJ#=SRC.OBJ# AND D.PNAME = 'SCAN_RATE') WHEN MATCHED THEN UPDATE SET D.VALCHAR= TO_CHAR(SRC.SCANRATE), D.CHGTIME=SRC.CHGTIME, D.SPARE1=1 WHEN NOT MATCHED THEN INSERT (OBJ#, PNAME, VALCHAR, CHGTIME, SPARE1) VALUES(SRC.OBJ#, 'SCAN_RATE', TO_CHAR(SRC.SCANRATE), SRC.CHGTIME, 1)"
b3853arjnybzv,24,0.05,0.04,"INSERT INTO AUDSYS.AUD$UNIFIED (AUDIT_TYPE, SESSIONID, PROXY_SESSIONID, OS_USER, HOST_NAME, TERMINAL, INSTANCE_ID, DBID, AUTHENTICATION_TYPE, USERID, PROXY_USERID, EXTERNAL_USERID, GLOBAL_USERID, CLIENT_PROGRAM_NAME, DBLINK_INFO, XS_USER_NAME, XS_SESSIONID, ENTRY_ID, STATEMENT_ID, EVENT_TIMESTAMP, ACTION, RETURN_CODE, OS_PROCESS, TRANSACTION_ID, SCN, EXECUTION_ID, OBJ_OWNER, OBJ_NAME, CLIENT_IDENTIFIER, NEW_OWNER, NEW_NAME, OBJECT_EDITION, SYSTEM_PRIVILEGE_USED, SYSTEM_PRIVILEGE, AUDIT_OPTION, OBJECT_PRIVILEGES, ROLE, TARGET_USER, EXCLUDED_USER, EXCLUDED_SCHEMA, EXCLUDED_OBJECT, CURRENT_USER, ADDITIONAL_INFO, UNIFIED_AUDIT_POLICIES) values (:AUDIT_TYPE, :SESSIONID, :PROXY_SESSIONID, :OS_USER, :HOST_NAME, :TERMINAL, :INSTANCE_ID, :DBID, :AUTHENTICATION_TYPE, :USERID, :PROXY_USERID, :EXTERNAL_USERID, :GLOBAL_USERID, :CLIENT_PROGRAM_NAME, :DBLINK_INFO, :XS_USER_NAME, :XS_SESSIONID, :ENTRY_ID, :STATEMENT_ID, :EVENT_TIMESTAMP, :ACTION, :RETURN_CODE, :OS_PROCESS, :TRANSACTION_ID, :SCN, :EXECUTION_ID, :OBJ_OWNER, :OBJ_NAME, :CLIENT_IDENTIFIER, :NEW_OWNER, :NEW_NAME, :OBJECT_EDITION, :SYSTEM_PRIVILEGE_USED, :SYSTEM_PRIVILEGE, :AUDIT_OPTION, :OBJECT_PRIVILEGES, :ROLE, :TARGET_USER, :EXCLUDED_USER, :EXCLUDED_SCHEMA, :EXCLUDED_OBJECT, :CURRENT_USER, :ADDITIONAL_INFO, :UNIFIED_AUDIT_POLICIES)"
f3ww8rgva3hrs,130,0.03,0.02,"update /* KSXM:FLUSH COL */ sys.col_usage$ set                  equality_preds    = equality_preds    + decode(bitand(:flag,1),0,0,1),   equijoin_preds    = equijoin_preds    + decode(bitand(:flag,2),0,0,1),   nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag,4),0,0,1),   range_preds       = range_preds       + decode(bitand(:flag,8),0,0,1),   like_preds        = like_preds        + decode(bitand(:flag,16),0,0,1),   null_preds        = null_preds        + decode(bitand(:flag,32),0,0,1),   flags             = flags + :flag - bitand(flags,:flag),    timestamp = :time where obj# = :objn and intcol# = :coln"
3dbzmtf9ahvzt,28,0.02,0.02,"merge /* KSXM:OPTIM_DML_INF */  into sys.mon_mods_all$ m                   using dual                                                                 on (m.obj# = :objn and                                                         (:pobjn = 0 or                                                              m.obj# = :pobjn or                                                         m.obj# in (select obj#                                                                from tabpart$                                                              where bo# = :pobjn and obj# = :objn                                        union all                                                                  select obj#                                                                from tabcompart$                                                           where bo# = :pobjn and obj# = :objn                                        union all                                                                  select tsp.obj#                                                            from tabsubpart$ tsp, tabcompart$ tcp                                      where tsp.pobj# = tcp.obj#                                                   and (tcp.bo# = :pobjn or tcp.obj# = :pobjn)                                and tsp.obj# = :objn)))                                  when matched then                                                            update                                                                     set inserts = decode(:reset, 1, 0, inserts) + :ins,                            updates = decode(:reset, 1, 0, updates) + :upd,                            deletes = decode(:reset, 1, 0, deletes) + :del,                            flags =  decode(:reset, 1, 0, flags - bitand(flags, :flag)) + :flag,       drop_segments = decode(:reset, 1, 0, drop_segments) + :dropseg,            timestamp = :time                                                    when NOT matched then                                                        insert (obj#, inserts, updates, deletes,                                           timestamp, flags, drop_segments)                                   values (:objn, :ins, :upd, :del, :time, :flag, :dropseg)                   where :ins != 0 or :upd != 0 or :del != 0 or :flag != 0 or :dropseg !=0"
0k8522rmdzg4k,25,0.01,0.01,select privilege# from sysauth$ where (grantee#=:1 or grantee#=1) and privilege#>0
0k8522rmdzg4k,25,0.01,0.01,select privilege# from sysauth$ where (grantee#=:1 or grantee#=1) and privilege#>0
3dbzmtf9ahvzt,32,0.01,0.01,"merge /* KSXM:OPTIM_DML_INF */  into sys.mon_mods_all$ m                   using dual                                                                 on (m.obj# = :objn and                                                         (:pobjn = 0 or                                                              m.obj# = :pobjn or                                                         m.obj# in (select obj#                                                                from tabpart$                                                              where bo# = :pobjn and obj# = :objn                                        union all                                                                  select obj#                                                                from tabcompart$                                                           where bo# = :pobjn and obj# = :objn                                        union all                                                                  select tsp.obj#                                                            from tabsubpart$ tsp, tabcompart$ tcp                                      where tsp.pobj# = tcp.obj#                                                   and (tcp.bo# = :pobjn or tcp.obj# = :pobjn)                                and tsp.obj# = :objn)))                                  when matched then                                                            update                                                                     set inserts = decode(:reset, 1, 0, inserts) + :ins,                            updates = decode(:reset, 1, 0, updates) + :upd,                            deletes = decode(:reset, 1, 0, deletes) + :del,                            flags =  decode(:reset, 1, 0, flags - bitand(flags, :flag)) + :flag,       drop_segments = decode(:reset, 1, 0, drop_segments) + :dropseg,            timestamp = :time                                                    when NOT matched then                                                        insert (obj#, inserts, updates, deletes,                                           timestamp, flags, drop_segments)                                   values (:objn, :ins, :upd, :del, :time, :flag, :dropseg)                   where :ins != 0 or :upd != 0 or :del != 0 or :flag != 0 or :dropseg !=0"
5dqz0hqtp9fru,79,0.01,0.01,"select /*+ connect_by_filtering index(sysauth$ i_sysauth1) */ privilege#, bitand(nvl(option$, 0), 72), grantee#, level from sysauth$ connect by grantee#=prior privilege# and privilege#>0 start with grantee#=:1 and privilege#>0"
0nakmm882vmq0,2,0.01,0.01,"select /* QOSH:DROP_STAT_HIST_PARTS */ partition_name, high_value from (select partition_name, high_value, rownum rn       from (select PARTITION_NAME, HIGH_VALUE             from dba_tab_partitions             where table_name = :1               and table_owner = 'SYS'               and partition_name <> 'P_PERMANENT'       order by partition_position asc)) v where rn < :2 "
gjaap3w3qbf8c,120,0.01,0.01,select count(*) from ilmobj$ where rownum = 1
7am4w4pp3nwtm,60,0.01,0.01,select count(*) from undo$
7am4w4pp3nwtm,60,0.01,0.01,select count(*) from undo$
5dqz0hqtp9fru,79,0.01,0.01,"select /*+ connect_by_filtering index(sysauth$ i_sysauth1) */ privilege#, bitand(nvl(option$, 0), 72), grantee#, level from sysauth$ connect by grantee#=prior privilege# and privilege#>0 start with grantee#=:1 and privilege#>0"
gjaap3w3qbf8c,119,0.01,0.01,select count(*) from ilmobj$ where rownum = 1
b9nbhsbx8tqz5,29,0.01,0.0,SELECT /*+ OPT_PARAM('_parallel_syspls_obey_force' 'false') */ SPARE4 FROM SYS.OPTSTAT_HIST_CONTROL$ WHERE SNAME = :B1 
f3ww8rgva3hrs,26,0.0,0.0,"update /* KSXM:FLUSH COL */ sys.col_usage$ set                  equality_preds    = equality_preds    + decode(bitand(:flag,1),0,0,1),   equijoin_preds    = equijoin_preds    + decode(bitand(:flag,2),0,0,1),   nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag,4),0,0,1),   range_preds       = range_preds       + decode(bitand(:flag,8),0,0,1),   like_preds        = like_preds        + decode(bitand(:flag,16),0,0,1),   null_preds        = null_preds        + decode(bitand(:flag,32),0,0,1),   flags             = flags + :flag - bitand(flags,:flag),    timestamp = :time where obj# = :objn and intcol# = :coln"
b9nbhsbx8tqz5,35,0.0,0.0,SELECT /*+ OPT_PARAM('_parallel_syspls_obey_force' 'false') */ SPARE4 FROM SYS.OPTSTAT_HIST_CONTROL$ WHERE SNAME = :B1 
586577qpbkgnk,3,0.0,0.0,select 1 from DBA_SCHEDULER_JOBS  where JOB_NAME like 'KWQICPOSTMSGDEL_1_%' and  JOB_ACTION = 'DBMS_AQADM_SYS.REMOVE_ORPHMSGS'
2ajc7pwz9jsx3,13,0.0,0.0,select max(scn) from smon_scn_time
586577qpbkgnk,3,0.0,0.0,select 1 from DBA_SCHEDULER_JOBS  where JOB_NAME like 'KWQICPOSTMSGDEL_1_%' and  JOB_ACTION = 'DBMS_AQADM_SYS.REMOVE_ORPHMSGS'
g0t052az3rx44,6,0.0,0.0,"select name,intcol#,segcol#,type#,length,nvl(precision#,0),decode(type#,2,nvl(scale,-127/*MAXSB1MINAL*/),178,scale,179,scale,180,scale,181,scale,182,scale,183,scale,231,scale,0),null$,fixedstorage,nvl(deflength,0),default$,rowid,col#,property, nvl(charsetid,0),nvl(charsetform,0),spare1,spare2,nvl(spare3,0), nvl(evaledition#,1),nvl(unusablebefore#,0),nvl(unusablebeginning#,0), case when (type# in (1,8,9,96,112)) then nvl(collid, 16382) else 0 end case, nvl(collintcol#,0), nvl(acdrrescol#, 0), nvl(spare7, 0), nvl(spare9, 0), nvl(spare10, 0) from col$ where obj#=:1 order by intcol#"
fzrshwabvtwc0,12,0.0,0.0,select max(FA#) from SYS_FBA_FA
b80uys4v5f6at,12,0.0,0.0,select count(*) from SYS.chnf$_reg_queries
g0t052az3rx44,2,0.0,0.0,"select name,intcol#,segcol#,type#,length,nvl(precision#,0),decode(type#,2,nvl(scale,-127/*MAXSB1MINAL*/),178,scale,179,scale,180,scale,181,scale,182,scale,183,scale,231,scale,0),null$,fixedstorage,nvl(deflength,0),default$,rowid,col#,property, nvl(charsetid,0),nvl(charsetform,0),spare1,spare2,nvl(spare3,0), nvl(evaledition#,1),nvl(unusablebefore#,0),nvl(unusablebeginning#,0), case when (type# in (1,8,9,96,112)) then nvl(collid, 16382) else 0 end case, nvl(collintcol#,0), nvl(acdrrescol#, 0), nvl(spare7, 0), nvl(spare9, 0), nvl(spare10, 0) from col$ where obj#=:1 order by intcol#"
